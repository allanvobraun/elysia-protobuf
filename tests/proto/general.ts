// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.9
// source: proto/general.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface RequestTags {
  tags: string[];
}

export interface ResponseTags {
  inlineTags: string;
}

function createBaseRequestTags(): RequestTags {
  return { tags: [] };
}

export const RequestTags: MessageFns<RequestTags> = {
  encode(
    message: RequestTags,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestTags {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestTags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestTags {
    return {
      tags: globalThis.Array.isArray(object?.tags)
        ? object.tags.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RequestTags): unknown {
    const obj: any = {};
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestTags>, I>>(base?: I): RequestTags {
    return RequestTags.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestTags>, I>>(
    object: I,
  ): RequestTags {
    const message = createBaseRequestTags();
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseResponseTags(): ResponseTags {
  return { inlineTags: "" };
}

export const ResponseTags: MessageFns<ResponseTags> = {
  encode(
    message: ResponseTags,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.inlineTags !== "") {
      writer.uint32(18).string(message.inlineTags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseTags {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseTags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inlineTags = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseTags {
    return {
      inlineTags: isSet(object.inlineTags)
        ? globalThis.String(object.inlineTags)
        : "",
    };
  },

  toJSON(message: ResponseTags): unknown {
    const obj: any = {};
    if (message.inlineTags !== "") {
      obj.inlineTags = message.inlineTags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseTags>, I>>(
    base?: I,
  ): ResponseTags {
    return ResponseTags.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseTags>, I>>(
    object: I,
  ): ResponseTags {
    const message = createBaseResponseTags();
    message.inlineTags = object.inlineTags ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
